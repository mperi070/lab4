1. Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S?

MPBOOTPHY changes the virtual address we have to a physical address by obtaining the offset and placing it from the MPENTRY_PADDR. It is necessary in kern/mpentry.S, but not in boot/boot.S because there it is loaded in page 0 by the BIOs. Here, the kernel is linked at KERNBASE and loaded at 0. Both of these, however, are mapped to the same location within the page table. If it is absent from mpentry.S, it will prevent us from loading the code correctly (because it’s below KERNBASE) from its position in the physical memory, the load position.

2. It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

Separate kernel stacks for each CPU are necessary despite only being able to run one at a time, because a shared kernel stack will push a trap frame when a processor enters the kernel. When the processor leaves, the trap frame pops. If other processes are entered within this time, the trap frame that’s being popped will not be of that process, but that of another that had just entered the stack. Therefore, it will not reenter at the proper location. 

3. In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context–the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

The code stored e into curenv and then referenced curenv. e is a pointer that’s allocated onto the kernel stack of the current processor. The virtual addresses that are above UTOP (in each environment) always map to the same physical addresses.

4. Whenever the kernel switches from one environment to another, it must ensure the old environment’s registers are saved so they can be restored properly later. Why? Where does this happen?

When a kernel switches from one environment to another, it has to make sure that the registers of the old environment have been saved so that they can be restored at a later time (this is treating it as if it had not been interrupted). This happens when we switch from user mode to kernel mode in the trap frame.
